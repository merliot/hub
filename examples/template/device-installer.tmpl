// Autogenerated from device-installer.tmpl

package main

import (
	"embed"
	"flag"
	"fmt"
	"io"
	"os"
	"os/exec"
	"os/user"
)

//go:embed {{.service}} {{.service}}.service {{.service}}.conf merliot.target
var fs embed.FS

func removeLogging() {
	fmt.Println("Removing logging for {{.service}}...")
	os.Remove("/etc/rsyslog.d/{{.service}}.conf")
	exec.Command("systemctl", "restart", "rsyslog.service").Run()
}

func removeService() {
	fmt.Println("Removing systemd service for {{.service}}...")
	exec.Command("systemctl", "stop", "{{.service}}").Run()
	exec.Command("systemctl", "disable", "{{.service}}").Run()
	os.Remove("/lib/systemd/system/{{.service}}.service")
	exec.Command("systemctl", "daemon-reload").Run()
}

func removemodel() {
	fmt.Println("Removing {{.service}}...")
	os.Remove("/usr/local/bin/{{.service}}")
}

func installFile(srcName, dstName string, mode os.FileMode) {
	exec.Command("systemctl", "stop", "{{.service}}").Run()

	src, err := fs.Open(srcName)
	if err != nil {
		panic(err.Error())
	}
	defer src.Close()

	dst, err := os.Create(dstName)
	if err != nil {
		panic(err.Error())
	}
	defer dst.Close()

	_, err = io.Copy(dst, src)
	if err != nil {
		panic(err.Error())
	}

	if err := os.Chmod(dstName, mode); err != nil {
		panic(err.Error())
	}
}

func installmodel() {
	fmt.Println("Intalling {{.service}}...")
	installFile("{{.service}}", "/usr/local/bin/{{.service}}", 0755)
}

func installLogging() {

	fmt.Println("Intalling logging for {{.service}}...")

	if _, err := os.Stat("/etc/rsyslog.d"); os.IsNotExist(err) {
		panic(fmt.Errorf("Failed: rsyslog is not installed; install with 'sudo apt install rsyslog'."))
	}

	installFile("{{.service}}.conf", "/etc/rsyslog.d/{{.service}}.conf", 0644)

	cmd := exec.Command("systemctl", "restart", "rsyslog.service")
	stdoutStderr, err := cmd.CombinedOutput()
	if err != nil {
		panic(fmt.Errorf("%w: %s", err, stdoutStderr))
	}
}

func installMerliotTarget() {
	fmt.Println("Intalling systemd target for Merliot devices")
	installFile("merliot.target", "/lib/systemd/system/merliot.target", 0644)
}

func installService() {

	fmt.Println("Intalling systemd service for {{.service}}...")
	installFile("{{.service}}.service", "/lib/systemd/system/{{.service}}.service", 0644)

	cmd := exec.Command("systemctl", "daemon-reload")
	stdoutStderr, err := cmd.CombinedOutput()
	if err != nil {
		panic(fmt.Errorf("%w: %s", err, stdoutStderr))
	}

	cmd = exec.Command("systemctl", "enable", "{{.service}}")
	stdoutStderr, err = cmd.CombinedOutput()
	if err != nil {
		panic(fmt.Errorf("%w: %s", err, stdoutStderr))
	}

	cmd = exec.Command("systemctl", "restart", "{{.service}}")
	stdoutStderr, err = cmd.CombinedOutput()
	if err != nil {
		panic(fmt.Errorf("%w: %s", err, stdoutStderr))
	}
}

func main() {

	remove := flag.Bool("u", false, "Uninstall {{.service}}")
	flag.Parse()

	user, _ := user.Current()
	if user.Username != "root" {
		fmt.Println("Installer must be run as root.")
		return
	}

	if *remove {
		removeLogging()
		removeService()
		removemodel()
	} else {
		installmodel()
		installLogging()
		installMerliotTarget()
		installService()
	}
	fmt.Println("Success!")
}
